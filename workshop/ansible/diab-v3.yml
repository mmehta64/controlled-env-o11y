---
- hosts: localhost
  gather_facts: false

  pre_tasks:
    - name: Set the required variables
      set_fact:
        ingest_token: "{{ lookup('env','ACCESS_TOKEN') }}"
        rum_token: "{{ lookup('env','RUM_TOKEN') }}"
        realm: "{{ lookup('env','REALM') }}"
        instance: "{{ lookup('env','INSTANCE') }}"
        hec_url: "{{ lookup('env','HEC_URL') }}"
        hec_token: "{{ lookup('env','HEC_TOKEN') }}"
        index: "{{ lookup('env','INDEX') }}"

  tasks:
    - name: Configure Demo-in-a-Box
      block:
      - name: Check to see if the config has run
        stat:
          path: /white_rabbit.followed
        register: wh_result

      - name: Extract demo-in-a-box.zip into /home/splunk/
        unarchive:
          src: demo-in-a-box.zip
          dest: /home/splunk/
          owner: splunk
          group: splunk
          remote_src: yes
          list_files: yes
        become: true
        register: diab_dir_name
        when: not wh_result.stat.exists

      #- name: Delete demo-in-a-box.zip
      #  file:
      #    path: /home/splunk/demo-in-a-box.zip
      #    state: absent
      #  become: true
      #  when: not wh_result.stat.exists
        
      - debug:
          var: diab_dir_name.files[0]
        when: not wh_result.stat.exists

      - name: Create K8s secrets YAML
        file:
          path: /home/splunk/workshop-secrets.yaml
          owner: splunk
          group: splunk
          state: touch
        become: true
        when: not wh_result.stat.exists

      - name: Update secrets YAML
        ansible.builtin.blockinfile:
          path: /home/splunk/workshop-secrets.yaml
          block: |
            apiVersion: v1
            kind: Secret
            metadata:
              name: workshop-secret
              namespace: default
            type: Opaque
            stringData:
              app: {{ instance }}-store
              env: {{ instance}}
              deployment: "deployment.environment={{ instance }}"
              access_token: {{ ingest_token }}
              realm: {{ realm }}
              rum_token: {{ rum_token }}
              hec_token: {{ hec_token }}
              hec_url: {{ hec_url }}
              url: "http://frontend"
          marker: "## {mark} Added by ansible (configuration Demo-in-a-Box)"
        become: true
        when: not wh_result.stat.exists

      - name: Demo-in-a-Box Kubernetes setup
        command: kubectl apply -f workshop-secrets.yaml
        when: not wh_result.stat.exists

      - name: Create service for Demo-in-a-Box Manager API
        file:
          path: /etc/systemd/system/diab-manager-api.service
          state: touch
        become: true
        when: not wh_result.stat.exists

      - name: Update service for diab-manager-api.service
        ansible.builtin.blockinfile:
          path: /etc/systemd/system/diab-manager-api.service
          block: |
            [Unit]
            Description=Demo-in-a-Box Manager API Service
            After=network.target
            StartLimitIntervalSec=0
            [Service]
            Type=simple
            Restart=always
            RestartSec=1
            User=splunk
            Environment="KUBECONFIG=/home/splunk/.kube/config"
            WorkingDirectory=/home/splunk/{{ diab_dir_name.files[0] }}v3
            ExecStart=/bin/bash scripts/run-manager-api.sh
            [Install]
            WantedBy=multi-user.target
          marker: "## {mark} Added by ansible (configuration Demo-in-a-Box)"
        become: true
        when: not wh_result.stat.exists

      - name: Create service for Demo-in-a-Box Manager UI
        file:
          path: /etc/systemd/system/diab-manager-ui.service
          state: touch
        become: true
        when: not wh_result.stat.exists

      - name: Update service for diab-manager-ui.service
        ansible.builtin.blockinfile:
          path: /etc/systemd/system/diab-manager-ui.service
          block: |
            [Unit]
            Description=Demo-in-a-Box Manager UI Service
            After=network.target
            StartLimitIntervalSec=0
            [Service]
            Type=simple
            Restart=always
            RestartSec=1
            User=splunk
            Environment="KUBECONFIG=/home/splunk/.kube/config"
            WorkingDirectory=/home/splunk/{{ diab_dir_name.files[0] }}v3
            ExecStart=/bin/bash scripts/run-manager-ui.sh
            [Install]
            WantedBy=multi-user.target
          marker: "## {mark} Added by ansible (configuration Demo-in-a-Box)"
        become: true
        when: not wh_result.stat.exists

      - name: Helm OTel Collector repository add
        command: helm repo add splunk-otel-collector-chart https://signalfx.github.io/splunk-otel-collector-chart
        when: not wh_result.stat.exists

      - name: Helm repository update
        command: helm repo update
        when: not wh_result.stat.exists

      - name: Start the diab-manager-api service
        command: systemctl enable --now diab-manager-api.service
        become: true
        when: not wh_result.stat.exists

      - name: Wait for diab-manager-api.service to start
        pause:
          seconds: 20
        when: not wh_result.stat.exists

      - name: Start the diab-manager service
        command: systemctl enable --now diab-manager-ui.service
        become: true
        when: not wh_result.stat.exists

      - name: Wait for diab-manager-ui.service to start
        pause:
          seconds: 5
        when: not wh_result.stat.exists

      - name: Save Demo-in-a-Box configuration
        uri:
          url: "http://localhost:8082/saveConfig"
          method: POST
          body: "realm={{ realm }}&ingest_token={{ ingest_token }}&rum_token={{ rum_token }}&hec_url={{ hec_url}}&hec_token={{ hec_token }}&splunk_index={{ index }}&instance={{ instance }}"
          status_code: [ 200, 201 ]
          timeout: 30
        register: splunk_api
        until: splunk_api.status == 200
        retries: 10
        delay: 5
        when: not wh_result.stat.exists

      - name: Create a file to signify that the config has run successfully
        file:
          path: "/white_rabbit.followed"
          state: touch
        become: true
        when: not wh_result.stat.exists
